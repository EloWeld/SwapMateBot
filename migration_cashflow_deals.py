#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è deal_id –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º CashFlow –∑–∞–ø–∏—Å—è–º
–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è additional_data —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏
"""

from models.cash_flow import CashFlow
from models.deal import Deal
import os
from dotenv import load_dotenv
from pymodm.connection import connect
from pymongo import MongoClient

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
MONGODB_CONNECTION_URI = os.environ["MongoConnectionString"]
MONGO_DB_NAME = os.environ["MongoDatabaseName"]

MDB = MongoClient(MONGODB_CONNECTION_URI).get_database(MONGO_DB_NAME)
connect(MONGODB_CONNECTION_URI+f'/{MONGO_DB_NAME}?authSource=admin', alias="pymodm-conn")


def find_deal_for_cashflow(cf: CashFlow):
    """
    –ù–∞—Ö–æ–¥–∏—Ç —Å–¥–µ–ª–∫—É –¥–ª—è CashFlow –∑–∞–ø–∏—Å–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:
    - owner (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    - source_currency (–∏—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞)
    - target_currency (—Ü–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞)
    - source_amount (—Å—É–º–º–∞ –∏—Å—Ö–æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã)
    - target_amount (—Å—É–º–º–∞ —Ü–µ–ª–µ–≤–æ–π –≤–∞–ª—é—Ç—ã)
    """
    if cf.type != CashFlow.CashFlowType.SWAP.name:
        return None

    # –ò—â–µ–º —Å–¥–µ–ª–∫–∏ —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    potential_deals = Deal.objects.raw({
        "owner": cf.user.id,
        "source_currency": cf.source_currency.id,
        "target_currency": cf.target_currency.id,
        "status": Deal.DealStatuses.FINISHED.value
    })

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Å—É–º–º–∞–º
    for deal in potential_deals:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—É–º–º—É (–º–æ–∂–µ—Ç –±—ã—Ç—å deal_value –∏–ª–∏ original_deal_value)
        source_matches = (
            abs(deal.deal_value - cf.source_amount) < 0.01 or
            (deal.original_deal_value and abs(deal.original_deal_value - cf.source_amount) < 0.01)
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–µ–≤—É—é —Å—É–º–º—É
        target_matches = abs((deal.deal_value * deal.rate) - cf.target_amount) < 0.01

        if source_matches and target_matches:
            return deal

    return None


def migrate_cashflow():
    """–î–æ–±–∞–≤–ª—è–µ—Ç deal_id –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º CashFlow –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç additional_data"""
    print("üîÑ –ù–∞—á–∏–Ω–∞—é –º–∏–≥—Ä–∞—Ü–∏—é CashFlow...")

    cashflows = list(CashFlow.objects.all())
    updated_count = 0
    linked_count = 0

    for cf in cashflows:
        updated = False

        # –î–æ–±–∞–≤–ª—è–µ–º deal_id –µ—Å–ª–∏ —ç—Ç–æ SWAP –∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        if cf.type == CashFlow.CashFlowType.SWAP.name and (not hasattr(cf, 'deal_id') or cf.deal_id is None):
            deal = find_deal_for_cashflow(cf)
            if deal:
                cf.deal_id = deal.id
                linked_count += 1
                updated = True
                print(f"üîó CashFlow #{cf.id} —Å–≤—è–∑–∞–Ω —Å–æ —Å–¥–µ–ª–∫–æ–π #{deal.id}")

        # –û–±–Ω–æ–≤–ª—è–µ–º additional_data –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç "–ü–æ –∫—É—Ä—Å—É:"
        if cf.additional_data == "–ü–æ –∫—É—Ä—Å—É:" and hasattr(cf, 'deal_id') and cf.deal_id:
            try:
                deal = Deal.objects.get({"_id": cf.deal_id})
                cf.additional_data = f"–ü–æ –∫—É—Ä—Å—É({'–•–æ—á—É –ø–æ–ª—É—á–∏—Ç—å' if deal.dir == 'wanna_receive' else '–•–æ—á—É –æ—Ç–¥–∞—Ç—å'}): "
                updated = True
                print(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω additional_data –¥–ª—è CashFlow #{cf.id}")
            except:
                print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å–¥–µ–ª–∫–∞ #{cf.deal_id} –¥–ª—è CashFlow #{cf.id}")

        if updated:
            cf.save()
            updated_count += 1

    print(f"\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ CashFlow –∑–∞–ø–∏—Å–µ–π: {updated_count}")
    print(f"üîó –°–≤—è–∑–∞–Ω–æ —Å–æ —Å–¥–µ–ª–∫–∞–º–∏: {linked_count}")


if __name__ == "__main__":
    migrate_cashflow()

import datetime
import random
from typing import Union
from etc.keyboards import Keyboards
from etc.states import UserStates
from etc.texts import BOT_TEXTS
from loader import Consts, dp
from aiogram.types import CallbackQuery, Message
from aiogram.dispatcher import FSMContext
from models.deal import Deal
from models.etc import Currency
from models.tg_user import TgUser
from loader import bot

# Text
def get_profile_text(user: TgUser):
    swap_count = Deal.objects.raw({"owner": user.id}).count()
    
    balances_text = "<code>–ù–µ—Ç</code>"
    if user.balances != {}:
        balances_text = "\n" + "\n".join([f"‚ñ´Ô∏è {Currency.objects.get({'_id': int(currency_id)}).symbol}: <code>{balance:.2f}</code>" for currency_id, balance in user.balances.items()])
    
    main_text = f"üí† –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å üí†\n\n" \
        f"üôÇ –ò–º—è: <code>{user.real_name}</code>\n" \
        f"üèòÔ∏è –ì–æ—Ä–æ–¥ <code>{user.city.name}</code>\n" \
        f"\n" \
        f"üí± –í—Å–µ–≥–æ —Å–≤–∞–ø–æ–≤: <code>{swap_count}</code>\n" \
        f"üí∞ –ë–∞–ª–∞–Ω—Å—ã: {balances_text}\n"
    if user.is_admin:
        if user.invited_by == user:
            main_text += "\nüëë –í—ã –∞–¥–º–∏–Ω üëë\n\n"
        else:
            main_text += "\nüëë –í—ã —Å—É–±-–∞–¥–º–∏–Ω üëë\n\n"

    return main_text


@dp.callback_query_handler(lambda c: c.data.startswith('|profile:'), state="*")
async def _(c: CallbackQuery, state: FSMContext = None, user: TgUser = None):
    actions = c.data.split(':')[1:]
    stateData = {} if state is None else await state.get_data()

    if actions[0] in ["main"]:
        await state.finish()
        await c.message.edit_text(get_profile_text(user), reply_markup=Keyboards.Profile.main(user))
        
    if actions[0] == "refill_balance":
        await c.message.edit_text(f"‚≠ê –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞–ª—é—Ç—É –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ\n\n–ü—Ä–∏–º–µ—Ä: <code>USD 50</code>", 
                                  reply_markup=Keyboards.back("|profile:main"))
        await UserStates.RefillBalance.set()
        
@dp.message_handler(state=UserStates.RefillBalance)
async def _(m: Message, state: FSMContext = None, user: TgUser = None):    
    try:
        currency_symbol = m.text.split()[0]
        refill_amount = float(m.text.split()[1])
    except Exception as e:
        await m.answer(BOT_TEXTS.InvalidValue)
        return
    
    
    await state.finish()
    await m.answer("üí∏üì• –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    try:
        await bot.send_message(Consts.RefillsChatID, f"üí∏üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ!"
                           f"\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={user.id}'>{user.real_name}</a> –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ\n\n"
                           f"–í–∞–ª—é—Ç–∞: <code>{currency_symbol}</code>\n"
                           f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{refill_amount}</code>\n", reply_markup=Keyboards.Admin.refill_user_balance(user, refill_amount, currency_symbol))
    except Exception as e:
        await bot.send_message(user.invited_by.id, f"‚ö†Ô∏è –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π!!! –ò–∑–º–µ–Ω–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É RefillsChatID.\n\n–û—à–∏–±–∫–∞: {e}")
import datetime
import os
from typing import List

import loguru
from etc.states import AdminInputStates
from etc.texts import BOT_TEXTS
from etc.utils import get_max_id_doc, get_rates_text
from loader import bot, dp
from aiogram.types import CallbackQuery, Message, ContentType
from aiogram.dispatcher.filters import ContentTypeFilter
from aiogram.dispatcher import FSMContext
from models.deal import Deal
from models.etc import Currency
from models.tg_user import TgUser
from etc.keyboards import Keyboards
from aiogram.dispatcher.filters import Text
from models.cash_flow import CashFlow
from aiogram.utils.exceptions import BotBlocked, ChatNotFound, UserDeactivated


from services.sheets_api import GoogleSheetsService
from services.sheets_syncer import SheetsSyncer


def broadcast_results_text(success, failed, deleted, all, spentTime):
    text = f"ü•Ç –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ! ({success}/{all})\n" \
            f"üëç –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{success}</b>\n" \
            f"üëé –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{failed}</b>\n" \
            f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{deleted}</b>\n" \
            f"üïê –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏: <b>{round(spentTime)} —Å–µ–∫</b>\n"
    return text

@dp.callback_query_handler(lambda c: c.data.startswith('|admin_broadcast:'), state="*")
async def _(c: CallbackQuery, state: FSMContext=None, user: TgUser = None):
    actions = c.data.split(':')[1:]
    stateData = {} if state is None else await state.get_data()
    
    if actions[0] == "go":
        if state:
            await state.finish()
        await c.message.edit_text("üí≠ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ –≤—Å—ë —á—Ç–æ –Ω—É–∂–Ω–æ:\n(–¢–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, GIF, –¥–æ–∫—É–º–µ–Ω—Ç)", reply_markup=Keyboards.back("|admin:main"))
        await AdminInputStates.BroadcastData.set()
        return
    
    if actions[0] == "cancel":
        await c.message.answer("üòê –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await c.message.answer(BOT_TEXTS.MainMenuText, reply_markup=Keyboards.start_menu(user))
        await c.message.delete()
        await state.finish()
        return
    
    if actions[0] == "confirm":
        msg = await c.message.answer("‚ôªÔ∏è –†–∞—Å—Å—ã–ª–∞—é...")
        bKeyboard = Keyboards.generate_from_text(stateData["broadcast_links"])
        bData = stateData['broadcast_data']
        success, failed, deleted, timeStart = 0, 0, 0, datetime.datetime.now()
        users = TgUser.objects.raw({"is_member": True})
        all = users.count()
        for user in users:
            # Try to send broadcast message
            try:
                await bot.copy_message(user.id, from_chat_id=bData['chat_id'],
                                        message_id=bData['message_id'],
                                        reply_markup=bKeyboard)
                success += 1
            except Exception as e:
                # If failed - check if bot blocked or user not found and remove him from database
                if e in [BotBlocked, ChatNotFound, UserDeactivated] or "Chat not found" in str(e) \
                        or "blocked " in str(e) \
                        or "deactivated" in str(e):
                    deleted += 1
                loguru.logger.error(f"[ BROADCAST ]: Can't send broadcast to {user.id}|{e}")
                failed += 1
        # Send message about broadcast finished
        spentTime = round((datetime.datetime.now() - timeStart).seconds)
        await msg.answer(broadcast_results_text(success, failed, deleted, all, spentTime))
        # Close state
        await state.finish()
    
    
@dp.message_handler(state=AdminInputStates.BroadcastData, content_types=ContentType.ANY)
async def _(m: Message, state: FSMContext, user: TgUser = None):
    if user.is_admin:
        data = dict(message_id=m.message_id, chat_id=m.chat.id)
        await state.update_data(broadcast_data=data)
        await m.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫\n" \
                    "[–¢–µ–∫—Å—Ç+–°—Å—ã–ª–∫–∞]\n" \
                    "<code>–ü—Ä–∏–º–µ—Ä</code>\n" \
                    "[ILoveGoogle + https://google.com]\n\n" \
                    "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–∏–Ω —Ä—è–¥ ‚Äî –ø–∏—à–∏—Ç–µ —Å—Å—ã–ª–∫–∏ —Ä—è–¥–æ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏, " \
                    "–Ω–µ –±–æ–ª–µ–µ —Ç—Ä–µ—Ö. –§–æ—Ä–º–∞—Ç:\n" \
                    "[–ü–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç + –ø–µ—Ä–≤–∞—è —Å—Å—ã–ª–∫–∞][–í—Ç–æ—Ä–æ–π —Ç–µ–∫—Å—Ç + –≤—Ç–æ—Ä–∞—è —Å—Å—ã–ª–∫–∞]\n\n" \
                    "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ—á–∫—É, –ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –§–æ—Ä–º–∞—Ç:\n" \
                    "[–ü–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç + –ø–µ—Ä–≤–∞—è —Å—Å—ã–ª–∫–∞]\n[–í—Ç–æ—Ä–æ–π —Ç–µ–∫—Å—Ç + –≤—Ç–æ—Ä–∞—è —Å—Å—ã–ª–∫–∞]")
        await AdminInputStates.BroadcastLinks.set()
        

@dp.message_handler(state=AdminInputStates.BroadcastLinks, content_types=ContentType.ANY)
async def _(m: Message, state: FSMContext, user: TgUser = None):
    if user.is_admin:
        broadcast_data = (await state.get_data())['broadcast_data']

        kb = Keyboards.generate_from_text(m.text)
        if not kb:
            await m.answer("‚õî –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ!")
        # Preview message
        await m.answer("–ë—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ")
        await bot.copy_message(user.id, from_chat_id=broadcast_data['chat_id'],
                               message_id=broadcast_data['message_id'],
                               reply_markup=kb)
        # Confirm and change state
        await m.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?", reply_markup=Keyboards.Admin.confirm_broadcast())
        await state.update_data(broadcast_links=m.text)

#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ CashFlow –∑–∞–ø–∏—Å–µ–π
–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö REFILL_BALANCE –∑–∞–ø–∏—Å–µ–π
"""

from models.etc import Currency
from models.cash_flow import CashFlow
from models.tg_user import TgUser
import os
import datetime
import json
from dotenv import load_dotenv
from pymodm.connection import connect
from pymongo import MongoClient

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
MONGODB_CONNECTION_URI = os.environ["MongoConnectionString"]
MONGO_DB_NAME = os.environ["MongoDatabaseName"]

MDB = MongoClient(MONGODB_CONNECTION_URI).get_database(MONGO_DB_NAME)
connect(MONGODB_CONNECTION_URI+f'/{MONGO_DB_NAME}?authSource=admin', alias="pymodm-conn")


def calculate_balance_from_cashflow(user_id: int):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ CashFlow –∑–∞–ø–∏—Å–µ–π"""
    cashflows: list[CashFlow] = list(CashFlow.objects.raw({"user": user_id}))
    calculated_balances = {}

    for cf in cashflows:
        if cf.type == CashFlow.CashFlowType.REFILL_BALANCE.name:
            # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ - –¥–æ–±–∞–≤–ª—è–µ–º —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            if cf.target_currency:
                currency_id = str(cf.target_currency.id)
                if currency_id not in calculated_balances:
                    calculated_balances[currency_id] = 0
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º additional_amount (–ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–æ —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–Ø)
                calculated_balances[currency_id] += cf.additional_amount
                cf.target_amount = calculated_balances[currency_id]
                print(f"üîß CashFlow #{cf.id}: {currency_id} target_amount/calculated_balances {cf.target_amount}")
                cf.save()

        elif cf.type == CashFlow.CashFlowType.SWAP.name:
            # –°–≤–∞–ø - —Å–ø–∏—Å—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –≤–∞–ª—é—Ç—É
            if cf.source_currency:
                currency_id = str(cf.source_currency.id)
                if currency_id not in calculated_balances:
                    calculated_balances[currency_id] = 0
                calculated_balances[currency_id] -= cf.source_amount

            # –ü—Ä–∏ —Å–≤–∞–ø–µ —Ü–µ–ª–µ–≤—É—é –≤–∞–ª—é—Ç—É –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –±–∞–ª–∞–Ω—Å (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏)

        elif cf.type == CashFlow.CashFlowType.BALANCE_EDIT.name:
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∞–¥–º–∏–Ω–æ–º - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if cf.target_currency:
                currency_id = str(cf.target_currency.id)
                # –î–ª—è BALANCE_EDIT target_amount - —ç—Ç–æ –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                calculated_balances[currency_id] = cf.target_amount

    # –£–±–∏—Ä–∞–µ–º –Ω—É–ª–µ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã
    calculated_balances = {k: v for k, v in calculated_balances.items() if abs(v) > 0.001}

    return calculated_balances


def recalculate_all_balances():
    """–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("üîÑ –ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

    users: list[TgUser] = list(TgUser.objects.all())
    updated_count = 0
    discrepancies = []

    for user in users:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ CashFlow
        calculated_balances = calculate_balance_from_cashflow(user.id)

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º –±–∞–ª–∞–Ω—Å–æ–º
        current_balances = user.balances if user.balances else {}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è
        has_discrepancy = False
        discrepancy_details = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–∞–ª—é—Ç—ã –∏–∑ calculated_balances
        for currency_id, calculated_amount in calculated_balances.items():
            current_amount = current_balances.get(currency_id, 0)
            if abs(calculated_amount - current_amount) > 0.01:
                has_discrepancy = True
                try:
                    currency = Currency.objects.get({"_id": int(currency_id)})
                    currency_symbol = currency.symbol
                except:
                    currency_symbol = f"ID:{currency_id}"

                discrepancy_details.append({
                    "currency": currency_symbol,
                    "current": current_amount,
                    "calculated": calculated_amount,
                    "difference": calculated_amount - current_amount
                })

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª—é—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ —Ç–µ–∫—É—â–µ–º –±–∞–ª–∞–Ω—Å–µ, –Ω–æ –Ω–µ—Ç –≤ calculated
        for currency_id, current_amount in current_balances.items():
            if currency_id not in calculated_balances and abs(current_amount) > 0.01:
                has_discrepancy = True
                try:
                    currency = Currency.objects.get({"_id": int(currency_id)})
                    currency_symbol = currency.symbol
                except:
                    currency_symbol = f"ID:{currency_id}"

                discrepancy_details.append({
                    "currency": currency_symbol,
                    "current": current_amount,
                    "calculated": 0,
                    "difference": -current_amount
                })

        if has_discrepancy:
            discrepancies.append({
                "user_id": user.id,
                "username": user.username,
                "real_name": user.real_name,
                "details": discrepancy_details
            })

            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.balances = calculated_balances
            user.save()
            updated_count += 1

            print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} (@{user.username})")
            for detail in discrepancy_details:
                print(f"   {detail['currency']}: {detail['current']} ‚Üí {detail['calculated']} (—Ä–∞–∑–Ω–∏—Ü–∞: {detail['difference']:+.2f})")

    return updated_count, discrepancies


def generate_report(updated_count, discrepancies):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    reports_dir = "migration_reports"
    if not os.path.exists(reports_dir):
        os.makedirs(reports_dir)

    report_file = os.path.join(reports_dir, f"balance_migration_report_{timestamp}.txt")

    with open(report_file, 'w', encoding='utf-8') as f:
        f.write("–û–¢–ß–ï–¢ –û –ú–ò–ì–†–ê–¶–ò–ò –ë–ê–õ–ê–ù–°–û–í –ò CASHFLOW\n")
        f.write("=" * 50 + "\n\n")
        f.write(f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {updated_count}\n")
        f.write(f"–ù–∞–π–¥–µ–Ω–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π: {len(discrepancies)}\n\n")

        if discrepancies:
            f.write("–î–ï–¢–ê–õ–ò –†–ê–°–•–û–ñ–î–ï–ù–ò–ô –ë–ê–õ–ê–ù–°–û–í:\n")
            f.write("-" * 30 + "\n\n")

            for disc in discrepancies:
                f.write(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {disc['user_id']} (@{disc['username']}) - {disc['real_name']}\n")
                for detail in disc['details']:
                    f.write(f"  {detail['currency']}: {detail['current']} ‚Üí {detail['calculated']} (—Ä–∞–∑–Ω–∏—Ü–∞: {detail['difference']:+.2f})\n")
                f.write("\n")

    print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {report_file}")
    return report_file


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    ans = input('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–ª–∏ 0 –¥–ª—è –≤—Å–µ—Ö: ')
    if ans != '0':
        user_id = int(ans)
        balances = calculate_balance_from_cashflow(user_id)
        print(balances)
        return

    print("üöÄ –ù–∞—á–∏–Ω–∞—é –º–∏–≥—Ä–∞—Ü–∏—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –∏ CashFlow...")
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–∏—Ç –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ CashFlow –∑–∞–ø–∏—Å–∏!")
    print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–æ–∑–¥–∞–ª–∏ –±—ç–∫–∞–ø –ë–î —á–µ—Ä–µ–∑ CLI –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º!")

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirmation = input("\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é? (–≤–≤–µ–¥–∏—Ç–µ 'YES' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è): ")
    if confirmation != "YES":
        print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return

    # 2. –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    updated_count, discrepancies = recalculate_all_balances()

    # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report_file = generate_report(updated_count, discrepancies)

    print(f"\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {updated_count}")
    print(f"   –ù–∞–π–¥–µ–Ω–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π: {len(discrepancies)}")
    print(f"   –û—Ç—á–µ—Ç: {report_file}")

    if discrepancies:
        print(f"\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è —É {len(discrepancies)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("üìÑ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –æ—Ç—á–µ—Ç–µ")


if __name__ == "__main__":
    main()

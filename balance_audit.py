#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞—É–¥–∏—Ç–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–∫—É—â–∏—Ö –±–∞–ª–∞–Ω—Å–æ–≤ –∏ –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π (CashFlow)
"""

from models.etc import Currency
from models.cash_flow import CashFlow
from models.tg_user import TgUser
import os
import sys
from dotenv import load_dotenv
from pymodm.connection import connect
from pymongo import MongoClient

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
MONGODB_CONNECTION_URI = os.environ["MongoConnectionString"]
MONGO_DB_NAME = os.environ["MongoDatabaseName"]

MDB = MongoClient(MONGODB_CONNECTION_URI).get_database(MONGO_DB_NAME)
connect(MONGODB_CONNECTION_URI+f'/{MONGO_DB_NAME}?authSource=admin', alias="pymodm-conn")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î


def audit_user_balance(user_id: int):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"\nüîç –ê–£–î–ò–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {user_id}")
    print("="*50)

    try:
        user = TgUser.objects.get({"_id": user_id})
    except:
        print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    print(f"üë§ –ò–º—è: {user.real_name}")
    print(f"üì± Username: @{user.username}")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cash_flows = list(CashFlow.objects.raw({"user": user_id}))
    cash_flows.sort(key=lambda x: x.created_at)

    print(f"\nüìä –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {len(cash_flows)}")
    print("\nüìà –ò–°–¢–û–†–ò–Ø –û–ü–ï–†–ê–¶–ò–ô:")
    print("-"*80)

    # –í—ã—á–∏—Å–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º
    calculated_balances = {}

    for cf in cash_flows:
        date_str = cf.created_at.strftime('%d.%m.%Y %H:%M:%S')

        if cf.type == "–ü–û–ü–û–õ–ù–ï–ù–ò–ï –°–ß–Å–¢–ê":
            currency_id = str(cf.target_currency.id)
            if currency_id not in calculated_balances:
                calculated_balances[currency_id] = 0
            calculated_balances[currency_id] += cf.additional_amount

            print(f"üí∞ {date_str} | –ü–û–ü–û–õ–ù–ï–ù–ò–ï | +{cf.additional_amount} {cf.target_currency.symbol}")

        elif cf.type == "–ò–ó–ú–ï–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê":
            currency_id = str(cf.target_currency.id)
            calculated_balances[currency_id] = cf.target_amount

            print(f"‚úèÔ∏è  {date_str} | –ò–ó–ú–ï–ù–ï–ù–ò–ï | {cf.source_amount} ‚Üí {cf.target_amount} {cf.target_currency.symbol}")

        elif cf.type == "–°–í–ê–ü":
            # –ü—Ä–∏ —Å–≤–∞–ø–µ –¢–û–õ–¨–ö–û —Å–ø–∏—Å—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –≤–∞–ª—é—Ç—É
            # –¶–µ–ª–µ–≤—É—é –≤–∞–ª—é—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏ (–Ω–µ –Ω–∞ –±–∞–ª–∞–Ω—Å –≤ —Å–∏—Å—Ç–µ–º–µ)
            source_id = str(cf.source_currency.id)
            if source_id not in calculated_balances:
                calculated_balances[source_id] = 0
            calculated_balances[source_id] -= cf.source_amount

            print(f"üîÑ {date_str} | –°–í–ê–ü | -{cf.source_amount} {cf.source_currency.symbol} (–ø–æ–ª—É—á–∏–ª {cf.target_amount} {cf.target_currency.symbol} —Ñ–∏–∑–∏—á–µ—Å–∫–∏)")

    print("\nüìä –°–†–ê–í–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–û–í:")
    print("-"*80)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∞–ª—é—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤
    currencies = {str(c.id): c.symbol for c in Currency.objects.all()}

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –±–∞–ª–∞–Ω—Å—ã
    all_currency_ids = set(calculated_balances.keys()) | set(user.balances.keys())

    has_discrepancy = False

    for currency_id in all_currency_ids:
        calculated = calculated_balances.get(currency_id, 0)
        actual = user.balances.get(currency_id, 0)
        currency_symbol = currencies.get(currency_id, f"ID_{currency_id}")

        if abs(calculated - actual) > 0.01:  # –î–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤ 1 –∫–æ–ø–µ–π–∫—É
            status = "‚ùå –û–®–ò–ë–ö–ê"
            has_discrepancy = True
        else:
            status = "‚úÖ –û–ö"

        print(f"{status} | {currency_symbol}: –í—ã—á–∏—Å–ª–µ–Ω–æ={calculated:.2f}, –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π={actual:.2f}")

    if has_discrepancy:
        print(f"\nüö® –ù–ê–ô–î–ï–ù–´ –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø –£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {user_id}!")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä –¥–ª—è USDT –≤ –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ
        usdt_currency = None
        for c in Currency.objects.all():
            if c.symbol == "USDT":
                usdt_currency = c
                break

        if usdt_currency:
            usdt_id = str(usdt_currency.id)
            print(f"\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –î–õ–Ø USDT:")
            print(f"   üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {sum([cf.additional_amount for cf in cash_flows if cf.type == '–ü–û–ü–û–õ–ù–ï–ù–ò–ï –°–ß–Å–¢–ê' and str(cf.target_currency.id) == usdt_id])}")
            print(f"   üîÑ –°–ø–∏—Å–∞–Ω–∏—è –ø–æ —Å–≤–∞–ø–∞–º: {sum([cf.source_amount for cf in cash_flows if cf.type == '–°–í–ê–ü' and str(cf.source_currency.id) == usdt_id])}")
            print(f"   ‚úèÔ∏è  –†—É—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {[cf for cf in cash_flows if cf.type == '–ò–ó–ú–ï–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê' and str(cf.target_currency.id) == usdt_id]}")

        return False
    else:
        print(f"\n‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        return True


def audit_all_users():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("üîç –ê–£–î–ò–¢ –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô")
    print("="*50)

    users = list(TgUser.objects.all())
    total_users = len(users)
    correct_users = 0
    incorrect_users = []

    for user in users:
        if audit_user_balance(user.id):
            correct_users += 1
        else:
            incorrect_users.append(user.id)

    print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("="*50)
    print(f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
    print(f"‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤: {correct_users}")
    print(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤: {len(incorrect_users)}")

    if incorrect_users:
        print(f"\nüö® –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° –û–®–ò–ë–ö–ê–ú–ò:")
        for user_id in incorrect_users:
            user = TgUser.objects.get({"_id": user_id})
            print(f"   ‚Ä¢ {user_id} (@{user.username}) - {user.real_name}")


def main():
    if len(sys.argv) > 1:
        # –ê—É–¥–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = int(sys.argv[1])
        audit_user_balance(user_id)
    else:
        # –ê—É–¥–∏—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        audit_all_users()


if __name__ == "__main__":
    main()
